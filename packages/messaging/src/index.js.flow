// @flow
/* eslint-disable */

/**
 * Temporary flow definitions until all dependent packages are converted
 * to TypeScript.
 */

import { Observable } from "rxjs";

export {
  JupyterMessageHeader,
  JupyterMessage,
  ExecuteMessageContent,
  ExecuteRequest,
  Channels
};

declare export function createMessage<MT: string>(
  msg_type: MT,
  fields?: Object
): JupyterMessage<MT, *>;

declare export function createExecuteRequest(code?: string): ExecuteRequest;

declare export function childOf(
  parentMessage: JupyterMessage<*, *>
): (
  source: Observable<JupyterMessage<*, *>>
) => Observable<JupyterMessage<*, *>>;

declare export function ofMessageType(
  ...messageTypes: Array<string> | [Array<string>]
): (source: Observable<JupyterMessage<*, *>>) => Observable<*>;

declare export function kernelStatuses(): (
  source: Observable<JupyterMessage<*, *>>
) => Observable<*>;

declare export function outputs(): (
  source: Observable<JupyterMessage<*, *>>
) => Observable<*>;

declare export function payloads(): (
  source: Observable<JupyterMessage<*, *>>
) => Observable<*>;

declare export function executionCounts(): (
  source: Observable<JupyterMessage<*, *>>
) => Observable<*>;

// messages.ts

declare export function executeRequest(
  code?: string,
  options?: {
    silent?: boolean,
    store_history?: boolean,
    user_expressions?: Object,
    allow_stdin?: boolean,
    stop_on_error?: boolean
  }
): ExecuteRequest;

declare export function kernelInfoRequest(): JupyterMessage<*, *>;

declare export function shutdownRequest(content?: {
  restart?: boolean
}): JupyterMessage<*, *>;
